<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DisasterSync - Incident Reporting</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.development.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.development.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/babel-standalone@7.24.7/babel.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="https://unpkg.com/@react-google-maps/api@2.19.3/dist/index.umd.js"></script>
</head>
<body>
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect } = React;

    // Simulated auth context
    const AuthContext = React.createContext();

    // Mock AI analysis API
    const analyzeMedia = async (file) => {
      // Simulate AI video/image analysis
      return {
        disasterType: "Flood",
        severity: "High",
        location: { lat: 40.7128, lng: -74.0060 },
        timestamp: new Date().toISOString(),
        summary: "Severe flooding detected in urban area with rising water levels."
      };
    };

    // Main App Component
    function App() {
      const [user, setUser] = useState(null);
      const [reports, setReports] = useState([]);
      const [ws, setWs] = useState(null);

      useEffect(() => {
        // Simulated WebSocket connection
        const websocket = new WebSocket('ws://localhost:8000/ws');
        websocket.onmessage = (event) => {
          const newReport = JSON.parse(event.data);
          setReports((prev) => [...prev, newReport]);
        };
        setWs(websocket);
        return () => websocket.close();
      }, []);

      const handleLogin = async (email, password) => {
        // Simulated login
        setUser({ email });
      };

      return (
        <AuthContext.Provider value={{ user, handleLogin }}>
          <div className="min-h-screen bg-gray-100">
            {user ? <Dashboard reports={reports} ws={ws} /> : <Login />}
          </div>
        </AuthContext.Provider>
      );
    }

    // Login Component
    function Login() {
      const { handleLogin } = React.useContext(AuthContext);
      const [email, setEmail] = useState('');
      const [password, setPassword] = useState('');

      const handleSubmit = (e) => {
        e.preventDefault();
        handleLogin(email, password);
      };

      return (
        <div className="flex items-center justify-center min-h-screen">
          <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-2xl font-bold mb-6 text-center">DisasterSync Login</h2>
            <div onSubmit={handleSubmit} className="space-y-4">
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Email"
                className="w-full p-2 border rounded"
              />
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Password"
                className="w-full p-2 border rounded"
              />
              <button
                onClick={handleSubmit}
                className="w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700"
              >
                Login
              </button>
            </div>
          </div>
        </div>
      );
    }

    // Dashboard Component
    function Dashboard({ reports, ws }) {
      const [file, setFile] = useState(null);
      const [uploading, setUploading] = useState(false);
      const [notification, setNotification] = useState(null);

      const handleFileChange = (e) => {
        setFile(e.target.files[0]);
      };

      const handleDrop = (e) => {
        e.preventDefault();
        setFile(e.dataTransfer.files[0]);
      };

      const handleUpload = async () => {
        if (!file) return;
        setUploading(true);
        const analysis = await analyzeMedia(file);
        const report = {
          id: Date.now(),
          file: URL.createObjectURL(file),
          ...analysis,
          status: 'pending'
        };
        // Simulate sending to backend
        ws.send(JSON.stringify(report));
        setNotification('Report uploaded successfully!');
        setUploading(false);
        setFile(null);
      };

      return (
        <div className="p-4">
          <h1 className="text-3xl font-bold mb-4">DisasterSync Dashboard</h1>
          {notification && (
            <div className="bg-green-500 text-white p-2 rounded mb-4">
              {notification}
            </div>
          )}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h2 className="text-xl font-semibold mb-2">Upload Incident Media</h2>
              <div
                className="border-2 border-dashed p-4 rounded"
                onDrop={handleDrop}
                onDragOver={(e) => e.preventDefault()}
              >
                <input
                  type="file"
                  accept="image/*,video/*"
                  onChange={handleFileChange}
                  className="mb-2"
                />
                <p className="text-gray-500">Drag and drop or click to upload</p>
              </div>
              <button
                onClick={handleUpload}
                disabled={!file || uploading}
                className="mt-2 bg-blue-600 text-white p-2 rounded hover:bg-blue-700 disabled:bg-gray-400"
              >
                {uploading ? 'Uploading...' : 'Upload Report'}
              </button>
            </div>
            <div>
              <h2 className="text-xl font-semibold mb-2">Incident Map</h2>
              <IncidentMap reports={reports} />
            </div>
          </div>
          <h2 className="text-xl font-semibold my-4">Recent Reports</h2>
          <ReportList reports={reports} />
        </div>
      );
    }

    // Incident Map Component
    function IncidentMap({ reports }) {
      const { isLoaded } = window.googleMaps.useJsApiLoader({
        googleMapsApiKey: 'YOUR_API_KEY' // Replace with actual key
      });

      if (!isLoaded) return <div>Loading Map...</div>;

      return (
        <window.googleMaps.Map
          mapContainerStyle={{ height: '400px', width: '100%' }}
          center={{ lat: 40.7128, lng: -74.0060 }}
          zoom={10}
        >
          {reports.map((report) => (
            <window.googleMaps.Marker
              key={report.id}
              position={report.location}
              title={report.summary}
            />
          ))}
        </window.googleMaps.Map>
      );
    }

    // Report List Component
    function ReportList({ reports }) {
      return (
        <div className="space-y-4">
          {reports.map((report) => (
            <div key={report.id} className="bg-white p-4 rounded shadow">
              <p><strong>Type:</strong> {report.disasterType}</p>
              <p><strong>Severity:</strong> {report.severity}</p>
              <p><strong>Location:</strong> Lat: {report.location.lat}, Lng: {report.location.lng}</p>
              <p><strong>Time:</strong> {report.timestamp}</p>
              <p><strong>Summary:</strong> {report.summary}</p>
              <p><strong>Status:</strong> <span className={`text-${report.status === 'pending' ? 'yellow' : report.status === 'processing' ? 'blue' : 'green'}-600`}>{report.status}</span></p>
              {report.file && (
                <div className="mt-2">
                  {report.file.includes('video') ? (
                    <video src={report.file} controls className="w-full max-w-xs" />
                  ) : (
                    <img src={report.file} alt="Incident" className="w-full max-w-xs" />
                  )}
                </div>
              )}
            </div>
          ))}
        </div>
      );
    }

    // Render the app
    ReactDOM.render(<App />, document.getElementById('root'));
  </script>
</body>
</html>
